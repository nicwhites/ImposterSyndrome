@namespace ImposterServerInstance.Pages.Game
@inject ImposterServerInstance.ServersManager.ServersManager server
@inject Blazored.Toast.Services.IToastService toastService
@inject NavigationManager NavigationManager
@inject ImposterServerInstance.Data.Controllers.NotificationSystem emergencySystem
@if (!(SessionPlayer is null))
{
    <div style="background-color:@Enum.GetName(typeof(ImposterServerInstance.GameModels.PlayerColor), SessionPlayer.PlayerData.Color)">
        <center>
            <h3>@SessionPlayer.PlayerData.Name</h3>
        </center>
    </div>
    <div class="container">
        <div class="vertical-center">
            <button class="btn-primary" @onclick="PerformTask">Perform Task</button>
            <button class="btn-primary" @onclick="KillPlayer">Kill Player</button>
        </div>
        <div class="vertical-center">
            <button class="btn-primary" @onclick="Emergency">EMERGENCY</button>
        </div>
    </div>
    <center>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        isAlive
                    </th>
                    <th>
                        isImposter
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        @SessionPlayer.PlayerData.isAlive
                    </td>
                    <td>
                        @SessionPlayer.PlayerData.isImposter
                    </td>
                </tr>
            </tbody>
        </table>
    </center>
}

@if (SessionPlayer.PlayerData.isEmergency)
{

    <div class="container">
        @if (!hasBeenReceived)
        {
            @DisplayMessage()
        }
        @if (!hasAcknowledged)
        {
            <button class="btn-primary" @onclick="@Acknowledge">Acknowledge!</button>
        }
    </div>
}

@code {

    [Parameter]
    public string GameId { get; set; }
    [Parameter]
    public int PlayerId { get; set; }
    [Parameter]
    public ImposterServerInstance.Controllers.HostController SessionHost { get; set; }

    private ImposterServerInstance.Controllers.PlayerController SessionPlayer { get; set; }

    private bool hasAcknowledged { get; set; } = false;
    private bool hasBeenReceived { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        SessionPlayer = SessionHost.Players.Find(x => x.PlayerData.PlayerId == PlayerId);
        emergencySystem.OnChange += (() => DisplayMessage());
    }


    protected async Task PerformTask()
    {

    }
    protected async Task KillPlayer()
    {

    }
    protected async Task RefreshPage()
    {
        if (!SessionPlayer.PlayerData.isEmergency)
        {
            hasBeenReceived = false;
        }
        await Task.Delay(1000);
        StateHasChanged();
    }
    protected async Task Acknowledge()
    {
        hasAcknowledged = true;
        SessionPlayer.ReceivedEmergency();
        await Task.Delay(1000);
    }
    protected async Task DisplayMessage()
    {
        hasBeenReceived = true;
        toastService.ShowError($"Meeting has been called by {emergencySystem.WhistleBlower}", "EMERGENCY!");
        await Task.Delay(TimeSpan.FromSeconds(10));
        hasAcknowledged = true;
    }
    protected async Task Emergency()
    {
        emergencySystem.Emergency(SessionPlayer.PlayerData.Name);
    }

}
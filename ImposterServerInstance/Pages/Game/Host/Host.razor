@namespace ImposterServerInstance.Pages.Game
@inject ImposterServerInstance.ServersManager.ServersManager server
@using ImposterServerInstance.Controllers
@inject NavigationManager NavigationManager


<h2>Lobby Code: @GameId</h2>

<button class="btn-primary" @onclick="@Refresh">Refresh Player List</button>

@if (SessionHost.Players is null)
{
    <p>Loading Page...</p>
}
@if (!(SessionHost.Players is null) && SessionHost.Players.Count == 0)
{
    <p><em>No players in Lobby...</em></p>
}
@if (!(SessionHost.Players is null) && SessionHost.Players.Count > 0)
{
    <button class="btn-primary" @onclick="StartGame">Start Game</button><span></span>
    <button class="btn-primary" @onclick="ExitGame">ExitGame</button>
    <table class="table" style="background-color: #b6b6b6; text-align: center">
        <thead>
            <tr>
                <th>
                    Player Name
                </th>
                <th>
                    Status
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in SessionHost.Players)
            {
                <tr>
                    <td style="background-color: @(Enum.GetName(typeof(ImposterServerInstance.GameModels.PlayerColor),player.PlayerData.Color))">
                        @player.PlayerData.Name
                    </td>
                    <td>
                        @(player.PlayerData.isAlive ? "Alive" : "Dead")
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string GameId { get; set; }
    [Parameter]
    public int HostId { get; set; }
    [Parameter]
    public HostController SessionHost { get; set; }

    protected override async Task OnInitializedAsync()
    {        
        await InvokeAsync(() => StateHasChanged());
    }

    protected async Task StartGame()
    {

    }
    protected async Task ExitGame()
    {
        var tmp = server.GamesInProgress.Find(x => x.GameId == Int32.Parse(GameId));
        server.RemoveGame(tmp);
        tmp.Dispose();
        NavigationManager.NavigateTo("/");
    }
    protected async Task Refresh()
    {
        await InvokeAsync(() => StateHasChanged());
    }


}
